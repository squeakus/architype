#jon_pylon.bnf first attempt at a pylon
# Jonathan Byrne <jonathanbyrn@gmail.com>

<S> ::= <program><call>
<program> ::= def mutant():{<init><constants><lines><define_funcs><make_sections><rotate><return>}
<define_funcs> ::= <centre><brace><cross_brace><create_arm><make_section>

<init> ::= pylon_graph = graph.graph(){}centre_ids = []{}all_brace_ids = []{}

#origin, base, arm1, arm2, arm3, top
<constants> ::= max_width = 5000{}max_height = 55000{}sections=5{}subsecs = [<3-5>, <3-5>, <3-5>,<3-5>,<3-5>]{}brace_type = [<2-3>, <2-3>, <2-3>, <2-3>, <2-3>]{}height_sizes = [<hsize>, <hsize>, <hsize>, <hsize>,<hsize> / 2]{}width_sizes = [<wsize>+1, <wsize>, <wsize>, <wsize>,<wsize>*5]{}height = scaled_list(0, max_height, height_sizes){}width = scaled_list(0, max_width, width_sizes, True){}

<lines> ::= line_points = optimal_line_placement(){}line_offset = (max_width * 1.5, 0 , height[2]){}for i in range(len(line_points)):{line_points[i] = pt_plus_pt(line_points[i],line_offset)}height[3] = line_points[1][2] * <1-1.05>{}height[4] = line_points[2][2] * <1-1.05>{}height[5] = height[4] * 1.1{}

<centre> ::= def centre(t):{pt_a, pt_b = section['base'], section['top']{}retval = (lambda t: interpolate(t, (pt_a, pt_b)))(t){}return retval}

<brace> ::= def brace(t):{pt_a, pt_b = section['base_offset'], section['top_offset']{}retval = (lambda t: pt_plus_pt((lambda t: interpolate(t, (pt_a, pt_b)))(t),(lambda t: centre(t))(t)))(t){}return retval}

<cross_brace> ::= def cross_brace(base_id, t):{n = section['brace_type']{}current_ids = []{}for j in range(n):{t_val = t + (j - (n - 1) / 2.0) / float(section['subsecs']){}if gt(t_val, 1): t_val = 1{}elif lt(t_val,0): t_val = 0{}xyz = brace(t_val){}if xyz[2] == 0:{new_id = pylon_graph.add_unique_node(xyz, 'base')}else:{new_id = pylon_graph.add_unique_node(xyz, 'crossbrace')}all_brace_ids.append(new_id){}current_ids.append(new_id){}pylon_graph.add_edge(base_id, new_id)}return current_ids}

<create_arm> ::= <weave_arm> | <varinski_arm>

<varinski_arm> ::= def create_arm(connectors, idx):{startpoint = line_points[idx]{}top_point = pylon_graph.node[connectors[0]]['xyz']{}base_point = pylon_graph.node[connectors[1]]['xyz']{}triangle = [startpoint, top_point, base_point]{}line_id = pylon_graph.add_unique_node(startpoint,'line'){}pylon_graph.varinski(triangle, 'arm', [1,2,2,2])}

<neighbour_arm> ::= def create_arm(connectors, idx):{arm_ids = []{}startpoint = line_points[idx]{}line_id = pylon_graph.add_unique_node(startpoint, 'line'){}for brace_id in connectors:{endpoint = pylon_graph.node[brace_id]['xyz']{}arm_points = subdivide_line(startpoint, endpoint, 1){}arm_ids.extend(pylon_graph.add_nodes(arm_points, 'arm', True))}pylon_graph.connect_neighbours(arm_ids, 3000, True)}

<weave_arm> ::= def create_arm(connectors, idx):{arm_ids = []{}startpoint = line_points[idx]{}line_id = pylon_graph.add_unique_node(startpoint, 'line'){}for brace_id in connectors:{endpoint = pylon_graph.node[brace_id]['xyz']{}arm_points = subdivide_line(startpoint, endpoint, 2){}arm_ids.append(pylon_graph.add_nodes(arm_points, 'arm', True))}for i in range(len(arm_ids) - 1):{pylon_graph.weave_nodes(arm_ids[i], arm_ids[i+1],1)}}


<make_section> ::= def make_section(level):{brace_ids = []{}for i in range(section['subsecs'] + 1):{t = i / float(section['subsecs']){}node_id = pylon_graph.add_unique_node(centre(t), 'centre'){}centre_ids.append(node_id){}brace_ids.extend(cross_brace(node_id, t))}if level in range(1, 4):{brace_set = list(set(brace_ids)){}brace_set.sort(){}connections = 2{}connectors = brace_set[-connections:]{}create_arm(connectors, level - 1)}}


<make_sections> ::= for x in range(sections):{section = dict(base=[0, width[x], height[x]],top=[0, width[x+1], height[x+1]],base_offset=[width[x],0,0],brace_type=brace_type[x],top_offset=[width[x+1],0,0],subsecs=subsecs[x]){}make_section(x)}


<rotate> ::= pylon_graph.connect_nodes(all_brace_ids){}pylon_graph.node[all_brace_ids[-1]]['label'] = 'ground'{}rotated_graph = pylon_graph.copy_and_rotate_around_xy_plane(pylon_graph,180){}mirror_graph = pylon_graph.copy_and_offset_with_mirror(rotated_graph, [0, 0, 0], True){}full_graph = pylon_graph.copy_and_rotate_around_xy_plane(mirror_graph, 90){}final_graph = pylon_graph.sanitise_pylon(full_graph, width[1]){}pylon_graph.replace_graph(final_graph){}

<fraction> ::= 0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1
<3-5> ::= 3|4|5
<hsize> ::= 5|6|7|8|9|10 
<wsize> ::= 1|2|3|4|5|6|7|8|9|10 
<2-3> ::= 2|3
<1-1.05> ::= 1|1.02|1.03|1.04|1.05
<return> ::= return pylon_graph{}
<call> ::= XXXeval_or_exec_outputXXX = mutant()


